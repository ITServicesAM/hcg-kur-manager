package itservicesam.android.hcg_kur_manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BODY_DATA".
*/
public class BodyDataDao extends AbstractDao<BodyData, Long> {

    public static final String TABLENAME = "BODY_DATA";

    /**
     * Properties of entity BodyData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Gewicht = new Property(2, double.class, "gewicht", false, "GEWICHT");
        public final static Property BauchUmfang = new Property(3, int.class, "bauchUmfang", false, "BAUCH_UMFANG");
        public final static Property OberschenkelUmfangLinks = new Property(4, int.class, "oberschenkelUmfangLinks", false, "OBERSCHENKEL_UMFANG_LINKS");
        public final static Property OberschenkelUmfangRechts = new Property(5, int.class, "oberschenkelUmfangRechts", false, "OBERSCHENKEL_UMFANG_RECHTS");
        public final static Property BrustUmfang = new Property(6, int.class, "brustUmfang", false, "BRUST_UMFANG");
        public final static Property PoUmfang = new Property(7, int.class, "poUmfang", false, "PO_UMFANG");
    };


    public BodyDataDao(DaoConfig config) {
        super(config);
    }
    
    public BodyDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BODY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER NOT NULL ," + // 1: date
                "\"GEWICHT\" REAL NOT NULL ," + // 2: gewicht
                "\"BAUCH_UMFANG\" INTEGER NOT NULL ," + // 3: bauchUmfang
                "\"OBERSCHENKEL_UMFANG_LINKS\" INTEGER NOT NULL ," + // 4: oberschenkelUmfangLinks
                "\"OBERSCHENKEL_UMFANG_RECHTS\" INTEGER NOT NULL ," + // 5: oberschenkelUmfangRechts
                "\"BRUST_UMFANG\" INTEGER NOT NULL ," + // 6: brustUmfang
                "\"PO_UMFANG\" INTEGER NOT NULL );"); // 7: poUmfang
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BODY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BodyData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate().getTime());
        stmt.bindDouble(3, entity.getGewicht());
        stmt.bindLong(4, entity.getBauchUmfang());
        stmt.bindLong(5, entity.getOberschenkelUmfangLinks());
        stmt.bindLong(6, entity.getOberschenkelUmfangRechts());
        stmt.bindLong(7, entity.getBrustUmfang());
        stmt.bindLong(8, entity.getPoUmfang());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BodyData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate().getTime());
        stmt.bindDouble(3, entity.getGewicht());
        stmt.bindLong(4, entity.getBauchUmfang());
        stmt.bindLong(5, entity.getOberschenkelUmfangLinks());
        stmt.bindLong(6, entity.getOberschenkelUmfangRechts());
        stmt.bindLong(7, entity.getBrustUmfang());
        stmt.bindLong(8, entity.getPoUmfang());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BodyData readEntity(Cursor cursor, int offset) {
        BodyData entity = new BodyData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.getDouble(offset + 2), // gewicht
            cursor.getInt(offset + 3), // bauchUmfang
            cursor.getInt(offset + 4), // oberschenkelUmfangLinks
            cursor.getInt(offset + 5), // oberschenkelUmfangRechts
            cursor.getInt(offset + 6), // brustUmfang
            cursor.getInt(offset + 7) // poUmfang
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BodyData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setGewicht(cursor.getDouble(offset + 2));
        entity.setBauchUmfang(cursor.getInt(offset + 3));
        entity.setOberschenkelUmfangLinks(cursor.getInt(offset + 4));
        entity.setOberschenkelUmfangRechts(cursor.getInt(offset + 5));
        entity.setBrustUmfang(cursor.getInt(offset + 6));
        entity.setPoUmfang(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BodyData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BodyData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
